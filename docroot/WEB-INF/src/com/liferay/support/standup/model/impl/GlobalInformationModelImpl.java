/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.support.standup.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.support.standup.model.GlobalInformation;
import com.liferay.support.standup.model.GlobalInformationModel;
import com.liferay.support.standup.model.GlobalInformationSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the GlobalInformation service. Represents a row in the &quot;SUP_GlobalInformation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.support.standup.model.GlobalInformationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GlobalInformationImpl}.
 * </p>
 *
 * @author Daniel Javorszky
 * @see GlobalInformationImpl
 * @see com.liferay.support.standup.model.GlobalInformation
 * @see com.liferay.support.standup.model.GlobalInformationModel
 * @generated
 */
@JSON(strict = true)
public class GlobalInformationModelImpl extends BaseModelImpl<GlobalInformation>
	implements GlobalInformationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a global information model instance should use the {@link com.liferay.support.standup.model.GlobalInformation} interface instead.
	 */
	public static final String TABLE_NAME = "SUP_GlobalInformation";
	public static final Object[][] TABLE_COLUMNS = {
			{ "globalInformationId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "date_", Types.TIMESTAMP },
			{ "message", Types.VARCHAR },
			{ "display", Types.INTEGER },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table SUP_GlobalInformation (globalInformationId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,date_ DATE null,message VARCHAR(75) null,display INTEGER,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table SUP_GlobalInformation";
	public static final String ORDER_BY_JPQL = " ORDER BY globalInformation.date ASC";
	public static final String ORDER_BY_SQL = " ORDER BY SUP_GlobalInformation.date_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.support.standup.model.GlobalInformation"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.support.standup.model.GlobalInformation"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.support.standup.model.GlobalInformation"),
			true);
	public static long DATE_COLUMN_BITMASK = 1L;
	public static long DISPLAY_COLUMN_BITMASK = 2L;
	public static long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static GlobalInformation toModel(GlobalInformationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		GlobalInformation model = new GlobalInformationImpl();

		model.setGlobalInformationId(soapModel.getGlobalInformationId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setDate(soapModel.getDate());
		model.setMessage(soapModel.getMessage());
		model.setDisplay(soapModel.getDisplay());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<GlobalInformation> toModels(
		GlobalInformationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<GlobalInformation> models = new ArrayList<GlobalInformation>(soapModels.length);

		for (GlobalInformationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.support.standup.model.GlobalInformation"));

	public GlobalInformationModelImpl() {
	}

	public long getPrimaryKey() {
		return _globalInformationId;
	}

	public void setPrimaryKey(long primaryKey) {
		setGlobalInformationId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_globalInformationId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return GlobalInformation.class;
	}

	public String getModelClassName() {
		return GlobalInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("globalInformationId", getGlobalInformationId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("date", getDate());
		attributes.put("message", getMessage());
		attributes.put("display", getDisplay());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long globalInformationId = (Long)attributes.get("globalInformationId");

		if (globalInformationId != null) {
			setGlobalInformationId(globalInformationId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date date = (Date)attributes.get("date");

		if (date != null) {
			setDate(date);
		}

		String message = (String)attributes.get("message");

		if (message != null) {
			setMessage(message);
		}

		Integer display = (Integer)attributes.get("display");

		if (display != null) {
			setDisplay(display);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	public long getGlobalInformationId() {
		return _globalInformationId;
	}

	public void setGlobalInformationId(long globalInformationId) {
		_globalInformationId = globalInformationId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public Date getDate() {
		return _date;
	}

	public void setDate(Date date) {
		_columnBitmask = -1L;

		if (_originalDate == null) {
			_originalDate = _date;
		}

		_date = date;
	}

	public Date getOriginalDate() {
		return _originalDate;
	}

	@JSON
	public String getMessage() {
		if (_message == null) {
			return StringPool.BLANK;
		}
		else {
			return _message;
		}
	}

	public void setMessage(String message) {
		_message = message;
	}

	@JSON
	public int getDisplay() {
		return _display;
	}

	public void setDisplay(int display) {
		_columnBitmask |= DISPLAY_COLUMN_BITMASK;

		if (!_setOriginalDisplay) {
			_setOriginalDisplay = true;

			_originalDisplay = _display;
		}

		_display = display;
	}

	public int getOriginalDisplay() {
		return _originalDisplay;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			GlobalInformation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GlobalInformation toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (GlobalInformation)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		GlobalInformationImpl globalInformationImpl = new GlobalInformationImpl();

		globalInformationImpl.setGlobalInformationId(getGlobalInformationId());
		globalInformationImpl.setCompanyId(getCompanyId());
		globalInformationImpl.setGroupId(getGroupId());
		globalInformationImpl.setUserId(getUserId());
		globalInformationImpl.setDate(getDate());
		globalInformationImpl.setMessage(getMessage());
		globalInformationImpl.setDisplay(getDisplay());
		globalInformationImpl.setStatus(getStatus());

		globalInformationImpl.resetOriginalValues();

		return globalInformationImpl;
	}

	public int compareTo(GlobalInformation globalInformation) {
		int value = 0;

		value = DateUtil.compareTo(getDate(), globalInformation.getDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		GlobalInformation globalInformation = null;

		try {
			globalInformation = (GlobalInformation)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = globalInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		GlobalInformationModelImpl globalInformationModelImpl = this;

		globalInformationModelImpl._originalGroupId = globalInformationModelImpl._groupId;

		globalInformationModelImpl._setOriginalGroupId = false;

		globalInformationModelImpl._originalDate = globalInformationModelImpl._date;

		globalInformationModelImpl._originalDisplay = globalInformationModelImpl._display;

		globalInformationModelImpl._setOriginalDisplay = false;

		globalInformationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<GlobalInformation> toCacheModel() {
		GlobalInformationCacheModel globalInformationCacheModel = new GlobalInformationCacheModel();

		globalInformationCacheModel.globalInformationId = getGlobalInformationId();

		globalInformationCacheModel.companyId = getCompanyId();

		globalInformationCacheModel.groupId = getGroupId();

		globalInformationCacheModel.userId = getUserId();

		Date date = getDate();

		if (date != null) {
			globalInformationCacheModel.date = date.getTime();
		}
		else {
			globalInformationCacheModel.date = Long.MIN_VALUE;
		}

		globalInformationCacheModel.message = getMessage();

		String message = globalInformationCacheModel.message;

		if ((message != null) && (message.length() == 0)) {
			globalInformationCacheModel.message = null;
		}

		globalInformationCacheModel.display = getDisplay();

		globalInformationCacheModel.status = getStatus();

		return globalInformationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{globalInformationId=");
		sb.append(getGlobalInformationId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", date=");
		sb.append(getDate());
		sb.append(", message=");
		sb.append(getMessage());
		sb.append(", display=");
		sb.append(getDisplay());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.liferay.support.standup.model.GlobalInformation");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>globalInformationId</column-name><column-value><![CDATA[");
		sb.append(getGlobalInformationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>date</column-name><column-value><![CDATA[");
		sb.append(getDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>message</column-name><column-value><![CDATA[");
		sb.append(getMessage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>display</column-name><column-value><![CDATA[");
		sb.append(getDisplay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GlobalInformation.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			GlobalInformation.class
		};
	private long _globalInformationId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private Date _date;
	private Date _originalDate;
	private String _message;
	private int _display;
	private int _originalDisplay;
	private boolean _setOriginalDisplay;
	private int _status;
	private long _columnBitmask;
	private GlobalInformation _escapedModelProxy;
}