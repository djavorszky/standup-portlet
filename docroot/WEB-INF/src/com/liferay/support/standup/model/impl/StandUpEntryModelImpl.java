/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.support.standup.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.support.standup.model.StandUpEntry;
import com.liferay.support.standup.model.StandUpEntryModel;
import com.liferay.support.standup.model.StandUpEntrySoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the StandUpEntry service. Represents a row in the &quot;StandupEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.support.standup.model.StandUpEntryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link StandUpEntryImpl}.
 * </p>
 *
 * @author Daniel Javorszky
 * @see StandUpEntryImpl
 * @see com.liferay.support.standup.model.StandUpEntry
 * @see com.liferay.support.standup.model.StandUpEntryModel
 * @generated
 */
@JSON(strict = true)
public class StandUpEntryModelImpl extends BaseModelImpl<StandUpEntry>
	implements StandUpEntryModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a stand up entry model instance should use the {@link com.liferay.support.standup.model.StandUpEntry} interface instead.
	 */
	public static final String TABLE_NAME = "StandupEntry";
	public static final Object[][] TABLE_COLUMNS = {
			{ "entryId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "quantity", Types.INTEGER },
			{ "difficulty", Types.INTEGER },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "blocking", Types.VARCHAR },
			{ "additionalDetails", Types.VARCHAR },
			{ "status", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table StandupEntry (entryId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,quantity INTEGER,difficulty INTEGER,createDate DATE null,modifiedDate DATE null,blocking VARCHAR(75) null,additionalDetails VARCHAR(75) null,status INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table StandupEntry";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.support.standup.model.StandUpEntry"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.support.standup.model.StandUpEntry"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static StandUpEntry toModel(StandUpEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		StandUpEntry model = new StandUpEntryImpl();

		model.setEntryId(soapModel.getEntryId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setQuantity(soapModel.getQuantity());
		model.setDifficulty(soapModel.getDifficulty());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setBlocking(soapModel.getBlocking());
		model.setAdditionalDetails(soapModel.getAdditionalDetails());
		model.setStatus(soapModel.getStatus());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<StandUpEntry> toModels(StandUpEntrySoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<StandUpEntry> models = new ArrayList<StandUpEntry>(soapModels.length);

		for (StandUpEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.support.standup.model.StandUpEntry"));

	public StandUpEntryModelImpl() {
	}

	public long getPrimaryKey() {
		return _entryId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEntryId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_entryId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return StandUpEntry.class;
	}

	public String getModelClassName() {
		return StandUpEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("entryId", getEntryId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("quantity", getQuantity());
		attributes.put("difficulty", getDifficulty());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("blocking", getBlocking());
		attributes.put("additionalDetails", getAdditionalDetails());
		attributes.put("status", getStatus());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long entryId = (Long)attributes.get("entryId");

		if (entryId != null) {
			setEntryId(entryId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Integer quantity = (Integer)attributes.get("quantity");

		if (quantity != null) {
			setQuantity(quantity);
		}

		Integer difficulty = (Integer)attributes.get("difficulty");

		if (difficulty != null) {
			setDifficulty(difficulty);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String blocking = (String)attributes.get("blocking");

		if (blocking != null) {
			setBlocking(blocking);
		}

		String additionalDetails = (String)attributes.get("additionalDetails");

		if (additionalDetails != null) {
			setAdditionalDetails(additionalDetails);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}
	}

	@JSON
	public long getEntryId() {
		return _entryId;
	}

	public void setEntryId(long entryId) {
		_entryId = entryId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public int getQuantity() {
		return _quantity;
	}

	public void setQuantity(int quantity) {
		_quantity = quantity;
	}

	@JSON
	public int getDifficulty() {
		return _difficulty;
	}

	public void setDifficulty(int difficulty) {
		_difficulty = difficulty;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getBlocking() {
		if (_blocking == null) {
			return StringPool.BLANK;
		}
		else {
			return _blocking;
		}
	}

	public void setBlocking(String blocking) {
		_blocking = blocking;
	}

	@JSON
	public String getAdditionalDetails() {
		if (_additionalDetails == null) {
			return StringPool.BLANK;
		}
		else {
			return _additionalDetails;
		}
	}

	public void setAdditionalDetails(String additionalDetails) {
		_additionalDetails = additionalDetails;
	}

	@JSON
	public int getStatus() {
		return _status;
	}

	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			StandUpEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public StandUpEntry toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (StandUpEntry)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		StandUpEntryImpl standUpEntryImpl = new StandUpEntryImpl();

		standUpEntryImpl.setEntryId(getEntryId());
		standUpEntryImpl.setCompanyId(getCompanyId());
		standUpEntryImpl.setGroupId(getGroupId());
		standUpEntryImpl.setUserId(getUserId());
		standUpEntryImpl.setQuantity(getQuantity());
		standUpEntryImpl.setDifficulty(getDifficulty());
		standUpEntryImpl.setCreateDate(getCreateDate());
		standUpEntryImpl.setModifiedDate(getModifiedDate());
		standUpEntryImpl.setBlocking(getBlocking());
		standUpEntryImpl.setAdditionalDetails(getAdditionalDetails());
		standUpEntryImpl.setStatus(getStatus());

		standUpEntryImpl.resetOriginalValues();

		return standUpEntryImpl;
	}

	public int compareTo(StandUpEntry standUpEntry) {
		long primaryKey = standUpEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		StandUpEntry standUpEntry = null;

		try {
			standUpEntry = (StandUpEntry)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = standUpEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<StandUpEntry> toCacheModel() {
		StandUpEntryCacheModel standUpEntryCacheModel = new StandUpEntryCacheModel();

		standUpEntryCacheModel.entryId = getEntryId();

		standUpEntryCacheModel.companyId = getCompanyId();

		standUpEntryCacheModel.groupId = getGroupId();

		standUpEntryCacheModel.userId = getUserId();

		standUpEntryCacheModel.quantity = getQuantity();

		standUpEntryCacheModel.difficulty = getDifficulty();

		Date createDate = getCreateDate();

		if (createDate != null) {
			standUpEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			standUpEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			standUpEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			standUpEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		standUpEntryCacheModel.blocking = getBlocking();

		String blocking = standUpEntryCacheModel.blocking;

		if ((blocking != null) && (blocking.length() == 0)) {
			standUpEntryCacheModel.blocking = null;
		}

		standUpEntryCacheModel.additionalDetails = getAdditionalDetails();

		String additionalDetails = standUpEntryCacheModel.additionalDetails;

		if ((additionalDetails != null) && (additionalDetails.length() == 0)) {
			standUpEntryCacheModel.additionalDetails = null;
		}

		standUpEntryCacheModel.status = getStatus();

		return standUpEntryCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{entryId=");
		sb.append(getEntryId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", quantity=");
		sb.append(getQuantity());
		sb.append(", difficulty=");
		sb.append(getDifficulty());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", blocking=");
		sb.append(getBlocking());
		sb.append(", additionalDetails=");
		sb.append(getAdditionalDetails());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("com.liferay.support.standup.model.StandUpEntry");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>entryId</column-name><column-value><![CDATA[");
		sb.append(getEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>quantity</column-name><column-value><![CDATA[");
		sb.append(getQuantity());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>difficulty</column-name><column-value><![CDATA[");
		sb.append(getDifficulty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>blocking</column-name><column-value><![CDATA[");
		sb.append(getBlocking());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>additionalDetails</column-name><column-value><![CDATA[");
		sb.append(getAdditionalDetails());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = StandUpEntry.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			StandUpEntry.class
		};
	private long _entryId;
	private long _companyId;
	private long _groupId;
	private long _userId;
	private String _userUuid;
	private int _quantity;
	private int _difficulty;
	private Date _createDate;
	private Date _modifiedDate;
	private String _blocking;
	private String _additionalDetails;
	private int _status;
	private StandUpEntry _escapedModelProxy;
}